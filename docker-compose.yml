version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: cryptons-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: cryptons
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - cryptons-network

  # Redis (for JWT token revocation and caching)
  redis:
    image: redis:7-alpine
    container_name: cryptons-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cryptons-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (Optional - for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cryptons-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cryptons-network
    profiles:
      - elasticsearch

  # Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cryptons-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/cryptons?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      BTC_ADDRESS: ${BTC_ADDRESS}
      ETH_ADDRESS: ${ETH_ADDRESS}
      USDT_ADDRESS: ${USDT_ADDRESS}
      SEED_DATA: ${SEED_DATA:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ELASTICSEARCH_ENABLED: ${ELASTICSEARCH_ENABLED:-false}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE:-http://elasticsearch:9200}
      REDIS_ENABLED: ${REDIS_ENABLED:-true}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - cryptons-network

  # Development service (optional)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cryptons-app-dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/cryptons?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret}
      BTC_ADDRESS: ${BTC_ADDRESS}
      ETH_ADDRESS: ${ETH_ADDRESS}
      USDT_ADDRESS: ${USDT_ADDRESS}
      SEED_DATA: "true"
      LOG_LEVEL: debug
      ELASTICSEARCH_ENABLED: ${ELASTICSEARCH_ENABLED:-false}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE:-http://elasticsearch:9200}
      REDIS_ENABLED: ${REDIS_ENABLED:-true}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
    depends_on:
      - mongodb
      - redis
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - cryptons-network
    profiles:
      - dev

networks:
  cryptons-network:
    driver: bridge

volumes:
  mongodb_data:
  mongodb_config:
  redis_data:
  elasticsearch_data:
