name: Deploy to Environments

on:
  push:
    branches: 
      - main
      - develop
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine deployment environment
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
    
    steps:
    - name: Determine environment
      id: set-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # Build and push Docker image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-deploy == 'true'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=${{ needs.setup.outputs.environment }}-
          type=raw,value=${{ needs.setup.outputs.environment }}-latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

  # Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: needs.setup.outputs.environment == 'development'
    environment:
      name: development
      url: https://dev.cstore.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to development
      run: |
        echo "Deploying to development environment"
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:development-latest"
        # Add your deployment commands here
        # Example: kubectl set image deployment/cstore cstore=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:development-latest

    - name: Run health check
      run: |
        echo "Running health check..."
        # Add health check commands
        # Example: curl -f https://dev.cstore.example.com/api/health || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: needs.setup.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.cstore.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging (Blue environment)
      run: |
        echo "Deploying to staging blue environment"
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest"
        # Deploy to blue environment
        # Example: kubectl set image deployment/cstore-blue cstore=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 30
        # Add deployment readiness check
        # Example: kubectl rollout status deployment/cstore-blue

    - name: Run health check on blue
      run: |
        echo "Running health check on blue environment..."
        # Add health check for blue environment
        # Example: curl -f https://blue.staging.cstore.example.com/api/health || exit 1

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke tests
        # Example: npm run test:smoke -- --env=staging-blue

    - name: Switch traffic to blue (Blue-Green deployment)
      run: |
        echo "Switching traffic to blue environment"
        # Switch load balancer to blue
        # Example: kubectl patch service cstore -p '{"spec":{"selector":{"version":"blue"}}}'

    - name: Monitor for errors
      run: |
        echo "Monitoring for errors..."
        sleep 60
        # Monitor logs for errors
        # If errors detected, rollback

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: needs.setup.outputs.environment == 'production'
    environment:
      name: production
      url: https://cstore.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Enable maintenance mode
      run: |
        echo "Enabling maintenance mode..."
        # Enable maintenance mode
        # Example: kubectl set env deployment/cstore MAINTENANCE_MODE=true
      continue-on-error: true

    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        # Run migrations
        # Example: kubectl run migration --image=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --command -- npm run migrate
      continue-on-error: false

    - name: Deploy to production (Blue environment)
      run: |
        echo "Deploying to production blue environment"
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:production-latest"
        # Deploy to blue environment
        # Example: kubectl set image deployment/cstore-blue cstore=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:production-latest

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 60
        # Add deployment readiness check
        # Example: kubectl rollout status deployment/cstore-blue --timeout=5m

    - name: Run health check on blue
      id: health-check
      run: |
        echo "Running health check on blue environment..."
        # Add comprehensive health checks
        # Example: curl -f https://blue.cstore.example.com/api/health || exit 1
        echo "health-status=success" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      id: smoke-tests
      run: |
        echo "Running smoke tests..."
        # Add smoke tests
        # Example: npm run test:smoke -- --env=production-blue
        echo "smoke-status=success" >> $GITHUB_OUTPUT

    - name: Gradual traffic shift (10%)
      if: steps.health-check.outputs.health-status == 'success' && steps.smoke-tests.outputs.smoke-status == 'success'
      run: |
        echo "Shifting 10% traffic to blue environment"
        # Shift 10% traffic
        sleep 120
        # Monitor for errors

    - name: Gradual traffic shift (50%)
      if: steps.health-check.outputs.health-status == 'success' && steps.smoke-tests.outputs.smoke-status == 'success'
      run: |
        echo "Shifting 50% traffic to blue environment"
        # Shift 50% traffic
        sleep 120
        # Monitor for errors

    - name: Complete traffic shift (100%)
      if: steps.health-check.outputs.health-status == 'success' && steps.smoke-tests.outputs.smoke-status == 'success'
      run: |
        echo "Shifting 100% traffic to blue environment"
        # Complete traffic shift
        # Example: kubectl patch service cstore -p '{"spec":{"selector":{"version":"blue"}}}'

    - name: Disable maintenance mode
      if: always()
      run: |
        echo "Disabling maintenance mode..."
        # Disable maintenance mode
        # Example: kubectl set env deployment/cstore MAINTENANCE_MODE-
      continue-on-error: true

    - name: Post-deployment verification
      run: |
        echo "Running post-deployment verification..."
        sleep 60
        # Verify deployment
        # Monitor metrics

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        # Rollback to green environment
        # Example: kubectl patch service cstore -p '{"spec":{"selector":{"version":"green"}}}'
        # Example: kubectl rollout undo deployment/cstore-blue

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [setup, build-and-push, deploy-development, deploy-staging, deploy-production]
    if: always() && needs.setup.outputs.should-deploy == 'true'
    
    steps:
    - name: Determine status
      id: status
      run: |
        if [ "${{ needs.deploy-development.result }}" == "success" ] || \
           [ "${{ needs.deploy-staging.result }}" == "success" ] || \
           [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ Deployment to ${{ needs.setup.outputs.environment }} succeeded" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Deployment to ${{ needs.setup.outputs.environment }} failed" >> $GITHUB_OUTPUT
        fi

    - name: Send notification (Slack/Discord placeholder)
      run: |
        echo "Notification: ${{ steps.status.outputs.message }}"
        echo "Would send to Slack/Discord webhook here"
        # Example Slack notification:
        # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
        #   -H 'Content-Type: application/json' \
        #   -d '{"text": "${{ steps.status.outputs.message }}"}'
